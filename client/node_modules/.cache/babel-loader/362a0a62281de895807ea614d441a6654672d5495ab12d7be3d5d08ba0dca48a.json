{"ast":null,"code":"import _objectSpread from\"/Users/anthonyreedy/bootcamp/Match-My-Mood/client/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";import React,{useState}from'react';import'./App.css';import'bootstrap/dist/css/bootstrap.min.css';import{ApolloClient,InMemoryCache,ApolloProvider,createHttpLink}from'@apollo/client';import{setContext}from'@apollo/client/link/context';import{BrowserRouter as Router,Routes,Route}from'react-router-dom';import logo from'./logo.svg';import Homepage from'./components/Homepage.js';import Header from'./components/Header.js';// import Navbar from './components/Navbar.js';\nimport Login from'./components/Login.js';import Player from'./components/Player.js';import Footer from'./components/Footer.js';import Moods from'./components/Moods';// Construct our main GraphQL API endpoint\nimport{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";var httpLink=createHttpLink({uri:'/graphql'});// Construct request middleware that will attach the JWT token to every request as an `authorization` header\nvar authLink=setContext(function(_,_ref){var headers=_ref.headers;// get the authentication token from local storage if it exists\nvar token=localStorage.getItem('id_token');// return the headers to the context so httpLink can read them\nreturn{headers:_objectSpread(_objectSpread({},headers),{},{authorization:token?\"Bearer \".concat(token):''})};});var client=new ApolloClient({// Set up our client to execute the `authLink` middleware prior to making the request to our GraphQL API\nlink:authLink.concat(httpLink),cache:new InMemoryCache()});function App(){return/*#__PURE__*/_jsx(ApolloProvider,{client:client,children:/*#__PURE__*/_jsx(Router,{children:/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsx(Header,{}),/*#__PURE__*/_jsx(\"div\",{children:/*#__PURE__*/_jsxs(Routes,{children:[/*#__PURE__*/_jsx(Route,{path:\"/\",element:/*#__PURE__*/_jsx(Homepage,{})}),/*#__PURE__*/_jsx(Route,{path:\"/login\",element:/*#__PURE__*/_jsx(Login,{})}),/*#__PURE__*/_jsx(Route,{path:\"/player/:moodId\",element:/*#__PURE__*/_jsx(Player,{})}),/*#__PURE__*/_jsx(Route,{path:\"/moods\",element:/*#__PURE__*/_jsx(Moods,{})})]})}),/*#__PURE__*/_jsx(Footer,{})]})})});}export default App;","map":{"version":3,"names":["React","useState","ApolloClient","InMemoryCache","ApolloProvider","createHttpLink","setContext","BrowserRouter","Router","Routes","Route","logo","Homepage","Header","Login","Player","Footer","Moods","jsx","_jsx","jsxs","_jsxs","httpLink","uri","authLink","_","_ref","headers","token","localStorage","getItem","_objectSpread","authorization","concat","client","link","cache","App","children","path","element"],"sources":["/Users/anthonyreedy/bootcamp/Match-My-Mood/client/src/App.js"],"sourcesContent":["import React, { useState } from 'react';\nimport './App.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\n\nimport {\n  ApolloClient,\n  InMemoryCache,\n  ApolloProvider,\n  createHttpLink,\n} from '@apollo/client';\nimport { setContext } from '@apollo/client/link/context';\nimport { BrowserRouter as Router, Routes, Route } from 'react-router-dom';\n\nimport logo from './logo.svg';\nimport Homepage from './components/Homepage.js';\nimport Header from './components/Header.js';\n// import Navbar from './components/Navbar.js';\nimport Login from './components/Login.js';\nimport Player from './components/Player.js'\nimport Footer from './components/Footer.js';\nimport Moods from './components/Moods';\n\n// Construct our main GraphQL API endpoint\nconst httpLink = createHttpLink({\n  uri: '/graphql',\n});\n\n// Construct request middleware that will attach the JWT token to every request as an `authorization` header\nconst authLink = setContext((_, { headers }) => {\n  // get the authentication token from local storage if it exists\n  const token = localStorage.getItem('id_token');\n  // return the headers to the context so httpLink can read them\n  return {\n    headers: {\n      ...headers,\n      authorization: token ? `Bearer ${token}` : '',\n    },\n  };\n});\n\nconst client = new ApolloClient({\n  // Set up our client to execute the `authLink` middleware prior to making the request to our GraphQL API\n  link: authLink.concat(httpLink),\n  cache: new InMemoryCache(),\n});\n\n\n\nfunction App() {\n  return (\n\n\n    <ApolloProvider client={client}>\n      <Router>\n        <div>\n          <Header />\n          <div>\n            <Routes>\n            <Route \n                path=\"/\"\n                element={<Homepage />}\n              />\n              <Route\n                path=\"/login\"\n                element={<Login />}\n                />\n              <Route \n                path=\"/player/:moodId\"\n                element={<Player />}\n              />\n              <Route \n                path=\"/moods\"\n                element={<Moods />}\n              />\n            </Routes>\n          </div>\n          <Footer />\n        </div>\n      </Router>\n    </ApolloProvider>\n\n\n  );\n}\n\nexport default App;\n"],"mappings":"sIAAA,MAAO,CAAAA,KAAK,EAAIC,QAAQ,KAAQ,OAAO,CACvC,MAAO,WAAW,CAClB,MAAO,sCAAsC,CAG7C,OACEC,YAAY,CACZC,aAAa,CACbC,cAAc,CACdC,cAAc,KACT,gBAAgB,CACvB,OAASC,UAAU,KAAQ,6BAA6B,CACxD,OAASC,aAAa,GAAI,CAAAC,MAAM,CAAEC,MAAM,CAAEC,KAAK,KAAQ,kBAAkB,CAEzE,MAAO,CAAAC,IAAI,KAAM,YAAY,CAC7B,MAAO,CAAAC,QAAQ,KAAM,0BAA0B,CAC/C,MAAO,CAAAC,MAAM,KAAM,wBAAwB,CAC3C;AACA,MAAO,CAAAC,KAAK,KAAM,uBAAuB,CACzC,MAAO,CAAAC,MAAM,KAAM,wBAAwB,CAC3C,MAAO,CAAAC,MAAM,KAAM,wBAAwB,CAC3C,MAAO,CAAAC,KAAK,KAAM,oBAAoB,CAEtC;AAAA,OAAAC,GAAA,IAAAC,IAAA,gCAAAC,IAAA,IAAAC,KAAA,yBACA,GAAM,CAAAC,QAAQ,CAAGjB,cAAc,CAAC,CAC9BkB,GAAG,CAAE,UACP,CAAC,CAAC,CAEF;AACA,GAAM,CAAAC,QAAQ,CAAGlB,UAAU,CAAC,SAACmB,CAAC,CAAAC,IAAA,CAAkB,IAAd,CAAAC,OAAO,CAAAD,IAAA,CAAPC,OAAO,CACvC;AACA,GAAM,CAAAC,KAAK,CAAGC,YAAY,CAACC,OAAO,CAAC,UAAU,CAAC,CAC9C;AACA,MAAO,CACLH,OAAO,CAAAI,aAAA,CAAAA,aAAA,IACFJ,OAAO,MACVK,aAAa,CAAEJ,KAAK,WAAAK,MAAA,CAAaL,KAAK,EAAK,EAAE,EAEjD,CAAC,CACH,CAAC,CAAC,CAEF,GAAM,CAAAM,MAAM,CAAG,GAAI,CAAAhC,YAAY,CAAC,CAC9B;AACAiC,IAAI,CAAEX,QAAQ,CAACS,MAAM,CAACX,QAAQ,CAAC,CAC/Bc,KAAK,CAAE,GAAI,CAAAjC,aAAa,EAC1B,CAAC,CAAC,CAIF,QAAS,CAAAkC,GAAGA,CAAA,CAAG,CACb,mBAGElB,IAAA,CAACf,cAAc,EAAC8B,MAAM,CAAEA,MAAO,CAAAI,QAAA,cAC7BnB,IAAA,CAACX,MAAM,EAAA8B,QAAA,cACLjB,KAAA,QAAAiB,QAAA,eACEnB,IAAA,CAACN,MAAM,IAAG,cACVM,IAAA,QAAAmB,QAAA,cACEjB,KAAA,CAACZ,MAAM,EAAA6B,QAAA,eACPnB,IAAA,CAACT,KAAK,EACF6B,IAAI,CAAC,GAAG,CACRC,OAAO,cAAErB,IAAA,CAACP,QAAQ,IAAI,EACtB,cACFO,IAAA,CAACT,KAAK,EACJ6B,IAAI,CAAC,QAAQ,CACbC,OAAO,cAAErB,IAAA,CAACL,KAAK,IAAI,EACjB,cACJK,IAAA,CAACT,KAAK,EACJ6B,IAAI,CAAC,iBAAiB,CACtBC,OAAO,cAAErB,IAAA,CAACJ,MAAM,IAAI,EACpB,cACFI,IAAA,CAACT,KAAK,EACJ6B,IAAI,CAAC,QAAQ,CACbC,OAAO,cAAErB,IAAA,CAACF,KAAK,IAAI,EACnB,GACK,EACL,cACNE,IAAA,CAACH,MAAM,IAAG,GACN,EACC,EACM,CAIrB,CAEA,cAAe,CAAAqB,GAAG"},"metadata":{},"sourceType":"module","externalDependencies":[]}